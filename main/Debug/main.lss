
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000756  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00000756  000007ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000866  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001145  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004da  00000000  00000000  00001af9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000963  00000000  00000000  00001fd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00002938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00002b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ab1  00000000  00000000  00002e41  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000038f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3f       	cpi	r26, 0xFC	; 252
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
  7a:	0c 94 a9 03 	jmp	0x752	; 0x752 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	de 9a       	sbi	0x1b, 6	; 27
  84:	00 00       	nop
  86:	de 98       	cbi	0x1b, 6	; 27
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	dc 9a       	sbi	0x1b, 4	; 27
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	dc 98       	cbi	0x1b, 4	; 27
  9a:	dd 98       	cbi	0x1b, 5	; 27
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	cb b3       	in	r28, 0x1b	; 27
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	db bb       	out	0x1b, r29	; 27
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	cb bb       	out	0x1b, r28	; 27
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	dc 9a       	sbi	0x1b, 4	; 27
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	dc 98       	cbi	0x1b, 4	; 27
  d2:	dd 9a       	sbi	0x1b, 5	; 27
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	de 9a       	sbi	0x1b, 6	; 27
  dc:	00 00       	nop
  de:	29 b3       	in	r18, 0x19	; 25
  e0:	de 98       	cbi	0x1b, 6	; 27
  e2:	00 00       	nop
  e4:	de 9a       	sbi	0x1b, 6	; 27
  e6:	00 00       	nop
  e8:	99 b3       	in	r25, 0x19	; 25
  ea:	22 95       	swap	r18
  ec:	20 7f       	andi	r18, 0xF0	; 240
  ee:	89 2f       	mov	r24, r25
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	de 98       	cbi	0x1b, 6	; 27
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_waitbusy+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_waitbusy+0xe>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 10c:	08 95       	ret

0000010e <lcd_command>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_gotoxy>:
 122:	61 11       	cpse	r22, r1
 124:	04 c0       	rjmp	.+8      	; 0x12e <lcd_gotoxy+0xc>
 126:	80 58       	subi	r24, 0x80	; 128
 128:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 12c:	08 95       	ret
 12e:	80 54       	subi	r24, 0x40	; 64
 130:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 134:	08 95       	ret

00000136 <lcd_clrscr>:
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 13c:	08 95       	ret

0000013e <lcd_putc>:
 13e:	cf 93       	push	r28
 140:	c8 2f       	mov	r28, r24
 142:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 146:	ca 30       	cpi	r28, 0x0A	; 10
 148:	49 f4       	brne	.+18     	; 0x15c <lcd_putc+0x1e>
 14a:	80 34       	cpi	r24, 0x40	; 64
 14c:	10 f0       	brcs	.+4      	; 0x152 <lcd_putc+0x14>
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	01 c0       	rjmp	.+2      	; 0x154 <lcd_putc+0x16>
 152:	80 e4       	ldi	r24, 0x40	; 64
 154:	80 58       	subi	r24, 0x80	; 128
 156:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 15a:	04 c0       	rjmp	.+8      	; 0x164 <lcd_putc+0x26>
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	8c 2f       	mov	r24, r28
 160:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_puts>:
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	ec 01       	movw	r28, r24
 16e:	21 96       	adiw	r28, 0x01	; 1
 170:	fc 01       	movw	r30, r24
 172:	80 81       	ld	r24, Z
 174:	88 23       	and	r24, r24
 176:	29 f0       	breq	.+10     	; 0x182 <lcd_puts+0x1a>
 178:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_putc>
 17c:	89 91       	ld	r24, Y+
 17e:	81 11       	cpse	r24, r1
 180:	fb cf       	rjmp	.-10     	; 0x178 <lcd_puts+0x10>
 182:	df 91       	pop	r29
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 188:	cf 93       	push	r28
 18a:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 18c:	9a b3       	in	r25, 0x1a	; 26
 18e:	9f 67       	ori	r25, 0x7F	; 127
 190:	9a bb       	out	0x1a, r25	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0xe>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x14>
 19c:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 19e:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 1a0:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 1a2:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1a6:	81 ee       	ldi	r24, 0xE1	; 225
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x22>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x28>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1b2:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1b6:	95 e1       	ldi	r25, 0x15	; 21
 1b8:	9a 95       	dec	r25
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_init+0x30>
 1bc:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1be:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1c2:	85 e1       	ldi	r24, 0x15	; 21
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x3c>
 1c8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1ca:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 1cc:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1d0:	95 e1       	ldi	r25, 0x15	; 21
 1d2:	9a 95       	dec	r25
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x4a>
 1d6:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1de:	88 e0       	ldi	r24, 0x08	; 8
 1e0:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1e4:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1e8:	86 e0       	ldi	r24, 0x06	; 6
 1ea:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1ee:	8c 2f       	mov	r24, r28
 1f0:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>

}/* lcd_init */
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <read_adc>:
		s++;
	}
}
unsigned int read_adc(unsigned char adc_input)
{
	ADMUX=adc_input;
 1f8:	87 b9       	out	0x07, r24	; 7
 1fa:	8a e1       	ldi	r24, 0x1A	; 26
 1fc:	8a 95       	dec	r24
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <read_adc+0x4>
 200:	00 c0       	rjmp	.+0      	; 0x202 <read_adc+0xa>
	// Delay needed for the stabilization of the ADC input voltage
	_delay_us(10);
	// Start the AD conversion
	ADCSRA|=0x40;
 202:	36 9a       	sbi	0x06, 6	; 6
	// Wait for the AD conversion to complete
	while ((ADCSRA & 0x10)==0);
 204:	34 9b       	sbis	0x06, 4	; 6
 206:	fe cf       	rjmp	.-4      	; 0x204 <read_adc+0xc>
	ADCSRA|=0x10;
 208:	34 9a       	sbi	0x06, 4	; 6
	return ADCW;
 20a:	84 b1       	in	r24, 0x04	; 4
 20c:	95 b1       	in	r25, 0x05	; 5
}
 20e:	08 95       	ret

00000210 <send_key>:
char send_key(void)
{
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	1f 93       	push	r17
 216:	cf 93       	push	r28
 218:	df 93       	push	r29
 21a:	c4 e0       	ldi	r28, 0x04	; 4
 21c:	d0 e0       	ldi	r29, 0x00	; 0
	char a;
	char vector;
	for (int i = 0; i < 4; i++)
	{
		a = '0'+ rand() % 9;
 21e:	0f 2e       	mov	r0, r31
 220:	f9 e0       	ldi	r31, 0x09	; 9
 222:	ef 2e       	mov	r14, r31
 224:	f1 2c       	mov	r15, r1
 226:	f0 2d       	mov	r31, r0
 228:	0e 94 36 03 	call	0x66c	; 0x66c <rand>
 22c:	b7 01       	movw	r22, r14
 22e:	0e 94 c2 02 	call	0x584	; 0x584 <__divmodhi4>
 232:	80 5d       	subi	r24, 0xD0	; 208
		UDR = a;
 234:	8c b9       	out	0x0c, r24	; 12
		vector = vector + a;
 236:	18 0f       	add	r17, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	81 ee       	ldi	r24, 0xE1	; 225
 23c:	94 e0       	ldi	r25, 0x04	; 4
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <send_key+0x2e>
 246:	00 c0       	rjmp	.+0      	; 0x248 <send_key+0x38>
 248:	00 00       	nop
 24a:	21 97       	sbiw	r28, 0x01	; 1
}
char send_key(void)
{
	char a;
	char vector;
	for (int i = 0; i < 4; i++)
 24c:	69 f7       	brne	.-38     	; 0x228 <send_key+0x18>
 24e:	2f ef       	ldi	r18, 0xFF	; 255
 250:	81 ee       	ldi	r24, 0xE1	; 225
 252:	94 e0       	ldi	r25, 0x04	; 4
 254:	21 50       	subi	r18, 0x01	; 1
 256:	80 40       	sbci	r24, 0x00	; 0
 258:	90 40       	sbci	r25, 0x00	; 0
 25a:	e1 f7       	brne	.-8      	; 0x254 <send_key+0x44>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <send_key+0x4e>
 25e:	00 00       	nop
		vector = vector + a;
		_delay_ms(200);
	}
	_delay_ms(200);
	return vector;
}
 260:	81 2f       	mov	r24, r17
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	ff 90       	pop	r15
 26a:	ef 90       	pop	r14
 26c:	08 95       	ret

0000026e <set_uart>:
void set_uart (void)
{
	UBRRL = BAUD_PRESCALE;
 26e:	89 e1       	ldi	r24, 0x19	; 25
 270:	89 b9       	out	0x09, r24	; 9
	UBRRH = (BAUD_PRESCALE >> 8);
 272:	10 bc       	out	0x20, r1	; 32
	UCSRA = 0b00000000; UCSRB = 0b00011000; UCSRC = 0b10000110; //Activar el bit 7 del UCSRB para interrupcion por RX completa
 274:	1b b8       	out	0x0b, r1	; 11
 276:	88 e1       	ldi	r24, 0x18	; 24
 278:	8a b9       	out	0x0a, r24	; 10
 27a:	86 e8       	ldi	r24, 0x86	; 134
 27c:	80 bd       	out	0x20, r24	; 32
 27e:	08 95       	ret

00000280 <configuraciones>:
}

void configuraciones (void)
{
	DDRB=0b00001111;//TECLADO
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	87 bb       	out	0x17, r24	; 23
	DDRC=0b11111111;//Pines indicadores del estado de la cerradura
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	84 bb       	out	0x14, r24	; 20
	PORTD=0x00;  
 288:	12 ba       	out	0x12, r1	; 18
	lcd_init (LCD_DISP_ON_CURSOR_BLINK); //Enciende el Lcd , enciende el cursor para poder escribir
 28a:	8f e0       	ldi	r24, 0x0F	; 15
 28c:	0e 94 c4 00 	call	0x188	; 0x188 <lcd_init>
 290:	08 95       	ret

00000292 <teclado>:
}
int teclado (void)
{
	PORTB = 1;
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	88 bb       	out	0x18, r24	; 24
	if (PINB & 1<<PINB4) return '^';//arriba
 296:	b4 99       	sbic	0x16, 4	; 22
 298:	30 c0       	rjmp	.+96     	; 0x2fa <teclado+0x68>
	if (PINB & 1<<PINB5) return '4';//4
 29a:	b5 99       	sbic	0x16, 5	; 22
 29c:	31 c0       	rjmp	.+98     	; 0x300 <teclado+0x6e>
	if (PINB & 1<<PINB6) return '7';//7
 29e:	b6 99       	sbic	0x16, 6	; 22
 2a0:	32 c0       	rjmp	.+100    	; 0x306 <teclado+0x74>
	if (PINB & 1<<PINB7) return '#';//#
 2a2:	b7 99       	sbic	0x16, 7	; 22
 2a4:	33 c0       	rjmp	.+102    	; 0x30c <teclado+0x7a>
	
	PORTB = 2;
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	88 bb       	out	0x18, r24	; 24
	if (PINB & 1<<PINB4) return '1';//1
 2aa:	b4 99       	sbic	0x16, 4	; 22
 2ac:	32 c0       	rjmp	.+100    	; 0x312 <teclado+0x80>
	if (PINB & 1<<PINB5) return '5';//5
 2ae:	b5 99       	sbic	0x16, 5	; 22
 2b0:	33 c0       	rjmp	.+102    	; 0x318 <teclado+0x86>
	if (PINB & 1<<PINB6) return '8';//8
 2b2:	b6 99       	sbic	0x16, 6	; 22
 2b4:	34 c0       	rjmp	.+104    	; 0x31e <teclado+0x8c>
	if (PINB & 1<<PINB7) return '0';//0
 2b6:	b7 99       	sbic	0x16, 7	; 22
 2b8:	35 c0       	rjmp	.+106    	; 0x324 <teclado+0x92>
	
	PORTB = 4;
 2ba:	84 e0       	ldi	r24, 0x04	; 4
 2bc:	88 bb       	out	0x18, r24	; 24
	if (PINB & 1<<PINB4) return '2';//2
 2be:	b4 99       	sbic	0x16, 4	; 22
 2c0:	34 c0       	rjmp	.+104    	; 0x32a <teclado+0x98>
	if (PINB & 1<<PINB5) return '6';//6
 2c2:	b5 99       	sbic	0x16, 5	; 22
 2c4:	35 c0       	rjmp	.+106    	; 0x330 <teclado+0x9e>
	if (PINB & 1<<PINB6) return '9';//9
 2c6:	b6 99       	sbic	0x16, 6	; 22
 2c8:	36 c0       	rjmp	.+108    	; 0x336 <teclado+0xa4>
	if (PINB & 1<<PINB7) return '*';//*
 2ca:	b7 99       	sbic	0x16, 7	; 22
 2cc:	37 c0       	rjmp	.+110    	; 0x33c <teclado+0xaa>
	
	PORTB = 8;
 2ce:	88 e0       	ldi	r24, 0x08	; 8
 2d0:	88 bb       	out	0x18, r24	; 24
	if (PINB & 1<<PINB4) return '3';//3
 2d2:	b4 99       	sbic	0x16, 4	; 22
 2d4:	36 c0       	rjmp	.+108    	; 0x342 <teclado+0xb0>
	if (PINB & 1<<PINB5) return '>';//>
 2d6:	b5 99       	sbic	0x16, 5	; 22
 2d8:	37 c0       	rjmp	.+110    	; 0x348 <teclado+0xb6>
	if (PINB & 1<<PINB6) return '<';//<
 2da:	b6 99       	sbic	0x16, 6	; 22
 2dc:	38 c0       	rjmp	.+112    	; 0x34e <teclado+0xbc>
	if (PINB & 1<<PINB7) return 'M';//M
 2de:	b7 99       	sbic	0x16, 7	; 22
 2e0:	39 c0       	rjmp	.+114    	; 0x354 <teclado+0xc2>
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	83 ef       	ldi	r24, 0xF3	; 243
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <teclado+0x56>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <teclado+0x60>
 2f2:	00 00       	nop
	
	_delay_ms(80);
	
	return 20;
 2f4:	84 e1       	ldi	r24, 0x14	; 20
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	08 95       	ret
	lcd_init (LCD_DISP_ON_CURSOR_BLINK); //Enciende el Lcd , enciende el cursor para poder escribir
}
int teclado (void)
{
	PORTB = 1;
	if (PINB & 1<<PINB4) return '^';//arriba
 2fa:	8e e5       	ldi	r24, 0x5E	; 94
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	08 95       	ret
	if (PINB & 1<<PINB5) return '4';//4
 300:	84 e3       	ldi	r24, 0x34	; 52
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	08 95       	ret
	if (PINB & 1<<PINB6) return '7';//7
 306:	87 e3       	ldi	r24, 0x37	; 55
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	08 95       	ret
	if (PINB & 1<<PINB7) return '#';//#
 30c:	83 e2       	ldi	r24, 0x23	; 35
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	08 95       	ret
	
	PORTB = 2;
	if (PINB & 1<<PINB4) return '1';//1
 312:	81 e3       	ldi	r24, 0x31	; 49
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	08 95       	ret
	if (PINB & 1<<PINB5) return '5';//5
 318:	85 e3       	ldi	r24, 0x35	; 53
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	08 95       	ret
	if (PINB & 1<<PINB6) return '8';//8
 31e:	88 e3       	ldi	r24, 0x38	; 56
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	08 95       	ret
	if (PINB & 1<<PINB7) return '0';//0
 324:	80 e3       	ldi	r24, 0x30	; 48
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	08 95       	ret
	
	PORTB = 4;
	if (PINB & 1<<PINB4) return '2';//2
 32a:	82 e3       	ldi	r24, 0x32	; 50
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	08 95       	ret
	if (PINB & 1<<PINB5) return '6';//6
 330:	86 e3       	ldi	r24, 0x36	; 54
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret
	if (PINB & 1<<PINB6) return '9';//9
 336:	89 e3       	ldi	r24, 0x39	; 57
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	08 95       	ret
	if (PINB & 1<<PINB7) return '*';//*
 33c:	8a e2       	ldi	r24, 0x2A	; 42
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	08 95       	ret
	
	PORTB = 8;
	if (PINB & 1<<PINB4) return '3';//3
 342:	83 e3       	ldi	r24, 0x33	; 51
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	08 95       	ret
	if (PINB & 1<<PINB5) return '>';//>
 348:	8e e3       	ldi	r24, 0x3E	; 62
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	08 95       	ret
	if (PINB & 1<<PINB6) return '<';//<
 34e:	8c e3       	ldi	r24, 0x3C	; 60
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	08 95       	ret
	if (PINB & 1<<PINB7) return 'M';//M
 354:	8d e4       	ldi	r24, 0x4D	; 77
 356:	90 e0       	ldi	r25, 0x00	; 0
	
	_delay_ms(80);
	
	return 20;
}
 358:	08 95       	ret

0000035a <main>:
int main(void)
{
	ADMUX=ADC_VREF_TYPE & 0xff;
 35a:	17 b8       	out	0x07, r1	; 7
	ADCSRA=0x83;
 35c:	83 e8       	ldi	r24, 0x83	; 131
 35e:	86 b9       	out	0x06, r24	; 6
	set_uart();
 360:	0e 94 37 01 	call	0x26e	; 0x26e <set_uart>
	//int adc_data;
	//float temp;
	passvalidar=0;
	pass='0'+'1'+'2'+'3';
	
	configuraciones();
 364:	0e 94 40 01 	call	0x280	; 0x280 <configuraciones>
	lcd_puts("Bienvenido!");
 368:	84 e6       	ldi	r24, 0x64	; 100
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	89 e6       	ldi	r24, 0x69	; 105
 374:	98 e1       	ldi	r25, 0x18	; 24
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x1c>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x26>
 380:	00 00       	nop
	_delay_ms(1000);
	lcd_clrscr();
 382:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
	lcd_puts("Presione M para");
 386:	80 e7       	ldi	r24, 0x70	; 112
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
	lcd_gotoxy(0,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
	lcd_puts("obtener una key.");
 396:	80 e8       	ldi	r24, 0x80	; 128
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 39e:	2f ef       	ldi	r18, 0xFF	; 255
 3a0:	83 ed       	ldi	r24, 0xD3	; 211
 3a2:	90 e3       	ldi	r25, 0x30	; 48
 3a4:	21 50       	subi	r18, 0x01	; 1
 3a6:	80 40       	sbci	r24, 0x00	; 0
 3a8:	90 40       	sbci	r25, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <main+0x4a>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <main+0x54>
 3ae:	00 00       	nop
	_delay_ms(2000);
	lcd_clrscr();
 3b0:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
	srand(read_adc(7));
 3b4:	87 e0       	ldi	r24, 0x07	; 7
 3b6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <read_adc>
 3ba:	0e 94 3b 03 	call	0x676	; 0x676 <srand>
	ADMUX=ADC_VREF_TYPE & 0xff;
	ADCSRA=0x83;
	set_uart();
	char caracter = '*';
	char passvalidar,a,tecla,pass;
	int contador=0;	
 3be:	00 e0       	ldi	r16, 0x00	; 0
 3c0:	10 e0       	ldi	r17, 0x00	; 0
	int cambio=0;
	//char str_temp[5];
	//int adc_data;
	//float temp;
	passvalidar=0;
	pass='0'+'1'+'2'+'3';
 3c2:	0f 2e       	mov	r0, r31
 3c4:	f6 ec       	ldi	r31, 0xC6	; 198
 3c6:	ff 2e       	mov	r15, r31
 3c8:	f0 2d       	mov	r31, r0
	int autorizacion=0;
	int cambio=0;
	//char str_temp[5];
	//int adc_data;
	//float temp;
	passvalidar=0;
 3ca:	d0 e0       	ldi	r29, 0x00	; 0
							lcd_clrscr();
							lcd_puts("Presione M para");
							lcd_gotoxy(0,1);
							lcd_puts("obtener una key.");
							passvalidar=0;
							contador=0;
 3cc:	d1 2c       	mov	r13, r1
 3ce:	e1 2c       	mov	r14, r1
				{
					if (autorizacion==1)
					{
						pass = send_key();
						_delay_ms(2000);
						UDR = 0x0d;
 3d0:	0f 2e       	mov	r0, r31
 3d2:	fd e0       	ldi	r31, 0x0D	; 13
 3d4:	cf 2e       	mov	r12, r31
 3d6:	f0 2d       	mov	r31, r0
// 		adc_data = read_adc(7);
// 		temp =adc_data*0.0049*100;
// 		lcd_clrscr();
// 		dtostrf(temp, 8, 4, str_temp);
// 		lcd_puts(str_temp);
		tecla=teclado();	
 3d8:	0e 94 49 01 	call	0x292	; 0x292 <teclado>
 3dc:	c8 2f       	mov	r28, r24
		if (tecla!=20)
 3de:	84 31       	cpi	r24, 0x14	; 20
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <main+0x8a>
 3e2:	c6 c0       	rjmp	.+396    	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
		{
				lcd_putc(caracter);//el PUTC sirve para mostrar lo que se escribe en el  LCD
 3e4:	8a e2       	ldi	r24, 0x2A	; 42
 3e6:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_putc>
				a=tecla;
				contador=contador+1;
				passvalidar=passvalidar+a;
				if (tecla=='<')  // cuando presionamos flecha izquierda se borra lo escrito
 3ea:	cc 33       	cpi	r28, 0x3C	; 60
 3ec:	31 f4       	brne	.+12     	; 0x3fa <main+0xa0>
				{
					lcd_clrscr(); // CLR scr  para limpiar el LCD (dejarlo en blanco)
 3ee:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
					passvalidar=0;
					contador=0;
 3f2:	0d 2d       	mov	r16, r13
 3f4:	1e 2d       	mov	r17, r14
				contador=contador+1;
				passvalidar=passvalidar+a;
				if (tecla=='<')  // cuando presionamos flecha izquierda se borra lo escrito
				{
					lcd_clrscr(); // CLR scr  para limpiar el LCD (dejarlo en blanco)
					passvalidar=0;
 3f6:	d0 e0       	ldi	r29, 0x00	; 0
 3f8:	bb c0       	rjmp	.+374    	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
					contador=0;
				}
				if (tecla=='M') // si presionamos  M cambiaremos la clave
 3fa:	cd 34       	cpi	r28, 0x4D	; 77
 3fc:	09 f0       	breq	.+2      	; 0x400 <__FUSE_REGION_LENGTH__>
 3fe:	6c c0       	rjmp	.+216    	; 0x4d8 <__FUSE_REGION_LENGTH__+0xd8>
				{
					lcd_clrscr();
 400:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
					lcd_puts("Espere mientras");
 404:	81 e9       	ldi	r24, 0x91	; 145
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
					lcd_gotoxy(0,1);
 40c:	61 e0       	ldi	r22, 0x01	; 1
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
					lcd_puts("la key se envia.");
 414:	81 ea       	ldi	r24, 0xA1	; 161
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 41c:	2f ef       	ldi	r18, 0xFF	; 255
 41e:	83 ed       	ldi	r24, 0xD3	; 211
 420:	90 e3       	ldi	r25, 0x30	; 48
 422:	21 50       	subi	r18, 0x01	; 1
 424:	80 40       	sbci	r24, 0x00	; 0
 426:	90 40       	sbci	r25, 0x00	; 0
 428:	e1 f7       	brne	.-8      	; 0x422 <__FUSE_REGION_LENGTH__+0x22>
 42a:	00 c0       	rjmp	.+0      	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 42c:	00 00       	nop
					_delay_ms(2000);
					lcd_clrscr();
 42e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
					contador=0;
					passvalidar=0;
				}
				if (cambio==1)
				{
					lcd_clrscr();
 432:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	81 ee       	ldi	r24, 0xE1	; 225
 43a:	94 e0       	ldi	r25, 0x04	; 4
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <__FUSE_REGION_LENGTH__+0x3c>
 444:	00 c0       	rjmp	.+0      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 446:	00 00       	nop
					_delay_ms(200);
					lcd_clrscr();
 448:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
					contador=0;
					passvalidar=0;
					autorizacion=autorizacion+1;
					lcd_clrscr();
 44c:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
				}
				if (cambio==1)
				{
					if (autorizacion==1)
					{
						pass = send_key();
 450:	0e 94 08 01 	call	0x210	; 0x210 <send_key>
 454:	f8 2e       	mov	r15, r24
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	83 ed       	ldi	r24, 0xD3	; 211
 45a:	90 e3       	ldi	r25, 0x30	; 48
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	80 40       	sbci	r24, 0x00	; 0
 460:	90 40       	sbci	r25, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
 466:	00 00       	nop
						_delay_ms(2000);
						UDR = 0x0d;
 468:	cc b8       	out	0x0c, r12	; 12
 46a:	2f ef       	ldi	r18, 0xFF	; 255
 46c:	84 e3       	ldi	r24, 0x34	; 52
 46e:	9c e0       	ldi	r25, 0x0C	; 12
 470:	21 50       	subi	r18, 0x01	; 1
 472:	80 40       	sbci	r24, 0x00	; 0
 474:	90 40       	sbci	r25, 0x00	; 0
 476:	e1 f7       	brne	.-8      	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 478:	00 c0       	rjmp	.+0      	; 0x47a <__FUSE_REGION_LENGTH__+0x7a>
 47a:	00 00       	nop
						_delay_ms(500);
						lcd_clrscr();
 47c:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
						lcd_puts("Clave enviada");
 480:	82 eb       	ldi	r24, 0xB2	; 178
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
						lcd_gotoxy(0,1);
 488:	61 e0       	ldi	r22, 0x01	; 1
 48a:	80 e0       	ldi	r24, 0x00	; 0
 48c:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
						lcd_puts("con exito!");
 490:	80 ec       	ldi	r24, 0xC0	; 192
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 498:	2f ef       	ldi	r18, 0xFF	; 255
 49a:	8d e3       	ldi	r24, 0x3D	; 61
 49c:	99 e4       	ldi	r25, 0x49	; 73
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	80 40       	sbci	r24, 0x00	; 0
 4a2:	90 40       	sbci	r25, 0x00	; 0
 4a4:	e1 f7       	brne	.-8      	; 0x49e <__FUSE_REGION_LENGTH__+0x9e>
 4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <__FUSE_REGION_LENGTH__+0xa8>
 4a8:	00 00       	nop
						_delay_ms(3000);
						lcd_clrscr();
 4aa:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
						lcd_puts("Ingrese la clave");
 4ae:	8b ec       	ldi	r24, 0xCB	; 203
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
						lcd_gotoxy(0,1);
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	80 e0       	ldi	r24, 0x00	; 0
 4ba:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	89 e6       	ldi	r24, 0x69	; 105
 4c2:	98 e1       	ldi	r25, 0x18	; 24
 4c4:	21 50       	subi	r18, 0x01	; 1
 4c6:	80 40       	sbci	r24, 0x00	; 0
 4c8:	90 40       	sbci	r25, 0x00	; 0
 4ca:	e1 f7       	brne	.-8      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <__FUSE_REGION_LENGTH__+0xce>
 4ce:	00 00       	nop
						_delay_ms(1000);
						cambio=0;
						contador=0;
 4d0:	0d 2d       	mov	r16, r13
 4d2:	1e 2d       	mov	r17, r14
						autorizacion=0;
						passvalidar=0;
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
 4d6:	4c c0       	rjmp	.+152    	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
		tecla=teclado();	
		if (tecla!=20)
		{
				lcd_putc(caracter);//el PUTC sirve para mostrar lo que se escribe en el  LCD
				a=tecla;
				contador=contador+1;
 4d8:	0f 5f       	subi	r16, 0xFF	; 255
 4da:	1f 4f       	sbci	r17, 0xFF	; 255
				passvalidar=passvalidar+a;
 4dc:	dc 0f       	add	r29, r28
						passvalidar=0;
					}
				}
				if (cambio==0)
				{
					if (contador==4)
 4de:	04 30       	cpi	r16, 0x04	; 4
 4e0:	11 05       	cpc	r17, r1
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__FUSE_REGION_LENGTH__+0xe6>
 4e4:	45 c0       	rjmp	.+138    	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
					{
						if (passvalidar==pass)
 4e6:	fd 12       	cpse	r15, r29
 4e8:	25 c0       	rjmp	.+74     	; 0x534 <__FUSE_REGION_LENGTH__+0x134>
						{
							lcd_clrscr();
 4ea:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
							lcd_puts("Clave correcta");
 4ee:	8c ed       	ldi	r24, 0xDC	; 220
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
							PORTC=0b00000001;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	85 bb       	out	0x15, r24	; 21
 4fa:	2f ef       	ldi	r18, 0xFF	; 255
 4fc:	87 e8       	ldi	r24, 0x87	; 135
 4fe:	93 e1       	ldi	r25, 0x13	; 19
 500:	21 50       	subi	r18, 0x01	; 1
 502:	80 40       	sbci	r24, 0x00	; 0
 504:	90 40       	sbci	r25, 0x00	; 0
 506:	e1 f7       	brne	.-8      	; 0x500 <__FUSE_REGION_LENGTH__+0x100>
 508:	00 c0       	rjmp	.+0      	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
 50a:	00 00       	nop
							_delay_ms(800);
							PORTC=0b00000000;
 50c:	15 ba       	out	0x15, r1	; 21
							lcd_clrscr();
 50e:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
							lcd_puts("Presione M para");
 512:	80 e7       	ldi	r24, 0x70	; 112
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
							lcd_gotoxy(0,1);
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
							lcd_puts("obtener una key.");
 522:	80 e8       	ldi	r24, 0x80	; 128
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
		if (tecla!=20)
		{
				lcd_putc(caracter);//el PUTC sirve para mostrar lo que se escribe en el  LCD
				a=tecla;
				contador=contador+1;
				passvalidar=passvalidar+a;
 52a:	fd 2e       	mov	r15, r29
							lcd_clrscr();
							lcd_puts("Presione M para");
							lcd_gotoxy(0,1);
							lcd_puts("obtener una key.");
							passvalidar=0;
							contador=0;
 52c:	0d 2d       	mov	r16, r13
 52e:	1e 2d       	mov	r17, r14
							PORTC=0b00000000;
							lcd_clrscr();
							lcd_puts("Presione M para");
							lcd_gotoxy(0,1);
							lcd_puts("obtener una key.");
							passvalidar=0;
 530:	d0 e0       	ldi	r29, 0x00	; 0
 532:	1e c0       	rjmp	.+60     	; 0x570 <__FUSE_REGION_LENGTH__+0x170>
							contador=0;
							
						}
						else
						{
							lcd_clrscr();
 534:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
							lcd_puts("Clave incorrecta");
 538:	8b ee       	ldi	r24, 0xEB	; 235
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
 540:	2f ef       	ldi	r18, 0xFF	; 255
 542:	83 ed       	ldi	r24, 0xD3	; 211
 544:	90 e3       	ldi	r25, 0x30	; 48
 546:	21 50       	subi	r18, 0x01	; 1
 548:	80 40       	sbci	r24, 0x00	; 0
 54a:	90 40       	sbci	r25, 0x00	; 0
 54c:	e1 f7       	brne	.-8      	; 0x546 <__FUSE_REGION_LENGTH__+0x146>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
 550:	00 00       	nop
							_delay_ms(2000);
							lcd_clrscr();
 552:	0e 94 9b 00 	call	0x136	; 0x136 <lcd_clrscr>
							lcd_puts("Presione M para");
 556:	80 e7       	ldi	r24, 0x70	; 112
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
							lcd_gotoxy(0,1);
 55e:	61 e0       	ldi	r22, 0x01	; 1
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	0e 94 91 00 	call	0x122	; 0x122 <lcd_gotoxy>
							lcd_puts("obtener una key.");
 566:	80 e8       	ldi	r24, 0x80	; 128
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_puts>
							aux=aux+1;
							passvalidar=0;
 56e:	d0 e0       	ldi	r29, 0x00	; 0
 570:	2f ef       	ldi	r18, 0xFF	; 255
 572:	81 ee       	ldi	r24, 0xE1	; 225
 574:	94 e0       	ldi	r25, 0x04	; 4
 576:	21 50       	subi	r18, 0x01	; 1
 578:	80 40       	sbci	r24, 0x00	; 0
 57a:	90 40       	sbci	r25, 0x00	; 0
 57c:	e1 f7       	brne	.-8      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <__FUSE_REGION_LENGTH__+0x180>
 580:	00 00       	nop
 582:	2a cf       	rjmp	.-428    	; 0x3d8 <main+0x7e>

00000584 <__divmodhi4>:
 584:	97 fb       	bst	r25, 7
 586:	07 2e       	mov	r0, r23
 588:	16 f4       	brtc	.+4      	; 0x58e <__divmodhi4+0xa>
 58a:	00 94       	com	r0
 58c:	07 d0       	rcall	.+14     	; 0x59c <__divmodhi4_neg1>
 58e:	77 fd       	sbrc	r23, 7
 590:	09 d0       	rcall	.+18     	; 0x5a4 <__divmodhi4_neg2>
 592:	0e 94 d6 02 	call	0x5ac	; 0x5ac <__udivmodhi4>
 596:	07 fc       	sbrc	r0, 7
 598:	05 d0       	rcall	.+10     	; 0x5a4 <__divmodhi4_neg2>
 59a:	3e f4       	brtc	.+14     	; 0x5aa <__divmodhi4_exit>

0000059c <__divmodhi4_neg1>:
 59c:	90 95       	com	r25
 59e:	81 95       	neg	r24
 5a0:	9f 4f       	sbci	r25, 0xFF	; 255
 5a2:	08 95       	ret

000005a4 <__divmodhi4_neg2>:
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255

000005aa <__divmodhi4_exit>:
 5aa:	08 95       	ret

000005ac <__udivmodhi4>:
 5ac:	aa 1b       	sub	r26, r26
 5ae:	bb 1b       	sub	r27, r27
 5b0:	51 e1       	ldi	r21, 0x11	; 17
 5b2:	07 c0       	rjmp	.+14     	; 0x5c2 <__udivmodhi4_ep>

000005b4 <__udivmodhi4_loop>:
 5b4:	aa 1f       	adc	r26, r26
 5b6:	bb 1f       	adc	r27, r27
 5b8:	a6 17       	cp	r26, r22
 5ba:	b7 07       	cpc	r27, r23
 5bc:	10 f0       	brcs	.+4      	; 0x5c2 <__udivmodhi4_ep>
 5be:	a6 1b       	sub	r26, r22
 5c0:	b7 0b       	sbc	r27, r23

000005c2 <__udivmodhi4_ep>:
 5c2:	88 1f       	adc	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	5a 95       	dec	r21
 5c8:	a9 f7       	brne	.-22     	; 0x5b4 <__udivmodhi4_loop>
 5ca:	80 95       	com	r24
 5cc:	90 95       	com	r25
 5ce:	bc 01       	movw	r22, r24
 5d0:	cd 01       	movw	r24, r26
 5d2:	08 95       	ret

000005d4 <do_rand>:
 5d4:	8f 92       	push	r8
 5d6:	9f 92       	push	r9
 5d8:	af 92       	push	r10
 5da:	bf 92       	push	r11
 5dc:	cf 92       	push	r12
 5de:	df 92       	push	r13
 5e0:	ef 92       	push	r14
 5e2:	ff 92       	push	r15
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	ec 01       	movw	r28, r24
 5ea:	68 81       	ld	r22, Y
 5ec:	79 81       	ldd	r23, Y+1	; 0x01
 5ee:	8a 81       	ldd	r24, Y+2	; 0x02
 5f0:	9b 81       	ldd	r25, Y+3	; 0x03
 5f2:	61 15       	cp	r22, r1
 5f4:	71 05       	cpc	r23, r1
 5f6:	81 05       	cpc	r24, r1
 5f8:	91 05       	cpc	r25, r1
 5fa:	21 f4       	brne	.+8      	; 0x604 <do_rand+0x30>
 5fc:	64 e2       	ldi	r22, 0x24	; 36
 5fe:	79 ed       	ldi	r23, 0xD9	; 217
 600:	8b e5       	ldi	r24, 0x5B	; 91
 602:	97 e0       	ldi	r25, 0x07	; 7
 604:	2d e1       	ldi	r18, 0x1D	; 29
 606:	33 ef       	ldi	r19, 0xF3	; 243
 608:	41 e0       	ldi	r20, 0x01	; 1
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	0e 94 46 03 	call	0x68c	; 0x68c <__divmodsi4>
 610:	49 01       	movw	r8, r18
 612:	5a 01       	movw	r10, r20
 614:	9b 01       	movw	r18, r22
 616:	ac 01       	movw	r20, r24
 618:	a7 ea       	ldi	r26, 0xA7	; 167
 61a:	b1 e4       	ldi	r27, 0x41	; 65
 61c:	0e 94 65 03 	call	0x6ca	; 0x6ca <__muluhisi3>
 620:	6b 01       	movw	r12, r22
 622:	7c 01       	movw	r14, r24
 624:	ac ee       	ldi	r26, 0xEC	; 236
 626:	b4 ef       	ldi	r27, 0xF4	; 244
 628:	a5 01       	movw	r20, r10
 62a:	94 01       	movw	r18, r8
 62c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__mulohisi3>
 630:	dc 01       	movw	r26, r24
 632:	cb 01       	movw	r24, r22
 634:	8c 0d       	add	r24, r12
 636:	9d 1d       	adc	r25, r13
 638:	ae 1d       	adc	r26, r14
 63a:	bf 1d       	adc	r27, r15
 63c:	b7 ff       	sbrs	r27, 7
 63e:	03 c0       	rjmp	.+6      	; 0x646 <do_rand+0x72>
 640:	01 97       	sbiw	r24, 0x01	; 1
 642:	a1 09       	sbc	r26, r1
 644:	b0 48       	sbci	r27, 0x80	; 128
 646:	88 83       	st	Y, r24
 648:	99 83       	std	Y+1, r25	; 0x01
 64a:	aa 83       	std	Y+2, r26	; 0x02
 64c:	bb 83       	std	Y+3, r27	; 0x03
 64e:	9f 77       	andi	r25, 0x7F	; 127
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	ff 90       	pop	r15
 656:	ef 90       	pop	r14
 658:	df 90       	pop	r13
 65a:	cf 90       	pop	r12
 65c:	bf 90       	pop	r11
 65e:	af 90       	pop	r10
 660:	9f 90       	pop	r9
 662:	8f 90       	pop	r8
 664:	08 95       	ret

00000666 <rand_r>:
 666:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <do_rand>
 66a:	08 95       	ret

0000066c <rand>:
 66c:	80 e6       	ldi	r24, 0x60	; 96
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <do_rand>
 674:	08 95       	ret

00000676 <srand>:
 676:	a0 e0       	ldi	r26, 0x00	; 0
 678:	b0 e0       	ldi	r27, 0x00	; 0
 67a:	80 93 60 00 	sts	0x0060, r24
 67e:	90 93 61 00 	sts	0x0061, r25
 682:	a0 93 62 00 	sts	0x0062, r26
 686:	b0 93 63 00 	sts	0x0063, r27
 68a:	08 95       	ret

0000068c <__divmodsi4>:
 68c:	05 2e       	mov	r0, r21
 68e:	97 fb       	bst	r25, 7
 690:	1e f4       	brtc	.+6      	; 0x698 <__divmodsi4+0xc>
 692:	00 94       	com	r0
 694:	0e 94 5d 03 	call	0x6ba	; 0x6ba <__negsi2>
 698:	57 fd       	sbrc	r21, 7
 69a:	07 d0       	rcall	.+14     	; 0x6aa <__divmodsi4_neg2>
 69c:	0e 94 78 03 	call	0x6f0	; 0x6f0 <__udivmodsi4>
 6a0:	07 fc       	sbrc	r0, 7
 6a2:	03 d0       	rcall	.+6      	; 0x6aa <__divmodsi4_neg2>
 6a4:	4e f4       	brtc	.+18     	; 0x6b8 <__divmodsi4_exit>
 6a6:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <__negsi2>

000006aa <__divmodsi4_neg2>:
 6aa:	50 95       	com	r21
 6ac:	40 95       	com	r20
 6ae:	30 95       	com	r19
 6b0:	21 95       	neg	r18
 6b2:	3f 4f       	sbci	r19, 0xFF	; 255
 6b4:	4f 4f       	sbci	r20, 0xFF	; 255
 6b6:	5f 4f       	sbci	r21, 0xFF	; 255

000006b8 <__divmodsi4_exit>:
 6b8:	08 95       	ret

000006ba <__negsi2>:
 6ba:	90 95       	com	r25
 6bc:	80 95       	com	r24
 6be:	70 95       	com	r23
 6c0:	61 95       	neg	r22
 6c2:	7f 4f       	sbci	r23, 0xFF	; 255
 6c4:	8f 4f       	sbci	r24, 0xFF	; 255
 6c6:	9f 4f       	sbci	r25, 0xFF	; 255
 6c8:	08 95       	ret

000006ca <__muluhisi3>:
 6ca:	0e 94 9a 03 	call	0x734	; 0x734 <__umulhisi3>
 6ce:	a5 9f       	mul	r26, r21
 6d0:	90 0d       	add	r25, r0
 6d2:	b4 9f       	mul	r27, r20
 6d4:	90 0d       	add	r25, r0
 6d6:	a4 9f       	mul	r26, r20
 6d8:	80 0d       	add	r24, r0
 6da:	91 1d       	adc	r25, r1
 6dc:	11 24       	eor	r1, r1
 6de:	08 95       	ret

000006e0 <__mulshisi3>:
 6e0:	b7 ff       	sbrs	r27, 7
 6e2:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__muluhisi3>

000006e6 <__mulohisi3>:
 6e6:	0e 94 65 03 	call	0x6ca	; 0x6ca <__muluhisi3>
 6ea:	82 1b       	sub	r24, r18
 6ec:	93 0b       	sbc	r25, r19
 6ee:	08 95       	ret

000006f0 <__udivmodsi4>:
 6f0:	a1 e2       	ldi	r26, 0x21	; 33
 6f2:	1a 2e       	mov	r1, r26
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	fd 01       	movw	r30, r26
 6fa:	0d c0       	rjmp	.+26     	; 0x716 <__udivmodsi4_ep>

000006fc <__udivmodsi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	ee 1f       	adc	r30, r30
 702:	ff 1f       	adc	r31, r31
 704:	a2 17       	cp	r26, r18
 706:	b3 07       	cpc	r27, r19
 708:	e4 07       	cpc	r30, r20
 70a:	f5 07       	cpc	r31, r21
 70c:	20 f0       	brcs	.+8      	; 0x716 <__udivmodsi4_ep>
 70e:	a2 1b       	sub	r26, r18
 710:	b3 0b       	sbc	r27, r19
 712:	e4 0b       	sbc	r30, r20
 714:	f5 0b       	sbc	r31, r21

00000716 <__udivmodsi4_ep>:
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	1a 94       	dec	r1
 720:	69 f7       	brne	.-38     	; 0x6fc <__udivmodsi4_loop>
 722:	60 95       	com	r22
 724:	70 95       	com	r23
 726:	80 95       	com	r24
 728:	90 95       	com	r25
 72a:	9b 01       	movw	r18, r22
 72c:	ac 01       	movw	r20, r24
 72e:	bd 01       	movw	r22, r26
 730:	cf 01       	movw	r24, r30
 732:	08 95       	ret

00000734 <__umulhisi3>:
 734:	a2 9f       	mul	r26, r18
 736:	b0 01       	movw	r22, r0
 738:	b3 9f       	mul	r27, r19
 73a:	c0 01       	movw	r24, r0
 73c:	a3 9f       	mul	r26, r19
 73e:	70 0d       	add	r23, r0
 740:	81 1d       	adc	r24, r1
 742:	11 24       	eor	r1, r1
 744:	91 1d       	adc	r25, r1
 746:	b2 9f       	mul	r27, r18
 748:	70 0d       	add	r23, r0
 74a:	81 1d       	adc	r24, r1
 74c:	11 24       	eor	r1, r1
 74e:	91 1d       	adc	r25, r1
 750:	08 95       	ret

00000752 <_exit>:
 752:	f8 94       	cli

00000754 <__stop_program>:
 754:	ff cf       	rjmp	.-2      	; 0x754 <__stop_program>
