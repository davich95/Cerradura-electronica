
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000020e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000020e  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000096f  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003e0  00000000  00000000  00000d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000671  00000000  00000000  000010fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  0000176c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000281  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000062f  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <main>
  7a:	0c 94 05 01 	jmp	0x20a	; 0x20a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
  82:	de 9a       	sbi	0x1b, 6	; 27
  84:	00 00       	nop
  86:	de 98       	cbi	0x1b, 6	; 27
  88:	08 95       	ret

0000008a <lcd_write>:
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	d8 2f       	mov	r29, r24
  90:	66 23       	and	r22, r22
  92:	11 f0       	breq	.+4      	; 0x98 <lcd_write+0xe>
  94:	dc 9a       	sbi	0x1b, 4	; 27
  96:	01 c0       	rjmp	.+2      	; 0x9a <lcd_write+0x10>
  98:	dc 98       	cbi	0x1b, 4	; 27
  9a:	dd 98       	cbi	0x1b, 5	; 27
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	8f 60       	ori	r24, 0x0F	; 15
  a0:	8a bb       	out	0x1a, r24	; 26
  a2:	cb b3       	in	r28, 0x1b	; 27
  a4:	c0 7f       	andi	r28, 0xF0	; 240
  a6:	8d 2f       	mov	r24, r29
  a8:	82 95       	swap	r24
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	8c 2b       	or	r24, r28
  ae:	8b bb       	out	0x1b, r24	; 27
  b0:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  b4:	df 70       	andi	r29, 0x0F	; 15
  b6:	dc 2b       	or	r29, r28
  b8:	db bb       	out	0x1b, r29	; 27
  ba:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
  be:	cf 60       	ori	r28, 0x0F	; 15
  c0:	cb bb       	out	0x1b, r28	; 27
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <lcd_read>:
  c8:	88 23       	and	r24, r24
  ca:	11 f0       	breq	.+4      	; 0xd0 <lcd_read+0x8>
  cc:	dc 9a       	sbi	0x1b, 4	; 27
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_read+0xa>
  d0:	dc 98       	cbi	0x1b, 4	; 27
  d2:	dd 9a       	sbi	0x1b, 5	; 27
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	80 7f       	andi	r24, 0xF0	; 240
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	de 9a       	sbi	0x1b, 6	; 27
  dc:	00 00       	nop
  de:	29 b3       	in	r18, 0x19	; 25
  e0:	de 98       	cbi	0x1b, 6	; 27
  e2:	00 00       	nop
  e4:	de 9a       	sbi	0x1b, 6	; 27
  e6:	00 00       	nop
  e8:	99 b3       	in	r25, 0x19	; 25
  ea:	22 95       	swap	r18
  ec:	20 7f       	andi	r18, 0xF0	; 240
  ee:	89 2f       	mov	r24, r25
  f0:	8f 70       	andi	r24, 0x0F	; 15
  f2:	de 98       	cbi	0x1b, 6	; 27
  f4:	82 2b       	or	r24, r18
  f6:	08 95       	ret

000000f8 <lcd_waitbusy>:
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
  fe:	88 23       	and	r24, r24
 100:	dc f3       	brlt	.-10     	; 0xf8 <lcd_waitbusy>
 102:	00 c0       	rjmp	.+0      	; 0x104 <lcd_waitbusy+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <lcd_waitbusy+0xe>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_read>
 10c:	08 95       	ret

0000010e <lcd_command>:
 10e:	cf 93       	push	r28
 110:	c8 2f       	mov	r28, r24
 112:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <lcd_clrscr>:
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 128:	08 95       	ret

0000012a <lcd_putc>:
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
 12e:	0e 94 7c 00 	call	0xf8	; 0xf8 <lcd_waitbusy>
 132:	ca 30       	cpi	r28, 0x0A	; 10
 134:	49 f4       	brne	.+18     	; 0x148 <lcd_putc+0x1e>
 136:	80 34       	cpi	r24, 0x40	; 64
 138:	10 f0       	brcs	.+4      	; 0x13e <lcd_putc+0x14>
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	01 c0       	rjmp	.+2      	; 0x140 <lcd_putc+0x16>
 13e:	80 e4       	ldi	r24, 0x40	; 64
 140:	80 58       	subi	r24, 0x80	; 128
 142:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
 146:	04 c0       	rjmp	.+8      	; 0x150 <lcd_putc+0x26>
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	8c 2f       	mov	r24, r28
 14c:	0e 94 45 00 	call	0x8a	; 0x8a <lcd_write>
 150:	cf 91       	pop	r28
 152:	08 95       	ret

00000154 <lcd_puts>:
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	ec 01       	movw	r28, r24
 15a:	21 96       	adiw	r28, 0x01	; 1
 15c:	fc 01       	movw	r30, r24
 15e:	80 81       	ld	r24, Z
 160:	88 23       	and	r24, r24
 162:	29 f0       	breq	.+10     	; 0x16e <lcd_puts+0x1a>
 164:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_putc>
 168:	89 91       	ld	r24, Y+
 16a:	81 11       	cpse	r24, r1
 16c:	fb cf       	rjmp	.-10     	; 0x164 <lcd_puts+0x10>
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 174:	cf 93       	push	r28
 176:	c8 2f       	mov	r28, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 178:	9a b3       	in	r25, 0x1a	; 26
 17a:	9f 67       	ori	r25, 0x7F	; 127
 17c:	9a bb       	out	0x1a, r25	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0xe>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x14>
 188:	00 00       	nop
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 18a:	d9 9a       	sbi	0x1b, 1	; 27
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 18c:	d8 9a       	sbi	0x1b, 0	; 27
    lcd_e_toggle();
 18e:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 192:	81 ee       	ldi	r24, 0xE1	; 225
 194:	94 e0       	ldi	r25, 0x04	; 4
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_init+0x22>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <lcd_init+0x28>
 19c:	00 00       	nop
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 19e:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1a2:	95 e1       	ldi	r25, 0x15	; 21
 1a4:	9a 95       	dec	r25
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_init+0x30>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1aa:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1ae:	85 e1       	ldi	r24, 0x15	; 21
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <lcd_init+0x3c>
 1b4:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1b6:	d8 98       	cbi	0x1b, 0	; 27
    lcd_e_toggle();
 1b8:	0e 94 41 00 	call	0x82	; 0x82 <toggle_e>
 1bc:	95 e1       	ldi	r25, 0x15	; 21
 1be:	9a 95       	dec	r25
 1c0:	f1 f7       	brne	.-4      	; 0x1be <lcd_init+0x4a>
 1c2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1c4:	88 e2       	ldi	r24, 0x28	; 40
 1c6:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1ca:	88 e0       	ldi	r24, 0x08	; 8
 1cc:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1d0:	0e 94 91 00 	call	0x122	; 0x122 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 1da:	8c 2f       	mov	r24, r28
 1dc:	0e 94 87 00 	call	0x10e	; 0x10e <lcd_command>

}/* lcd_init */
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <main>:
	_delay_ms(50);
	return 20;	
}
int main(void)
{
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_init>
	while(1)
	{
		lcd_clrscr();
 1ea:	0e 94 91 00 	call	0x122	; 0x122 <lcd_clrscr>
		lcd_puts("Ingrese dato");
 1ee:	80 e6       	ldi	r24, 0x60	; 96
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 aa 00 	call	0x154	; 0x154 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f6:	2f ef       	ldi	r18, 0xFF	; 255
 1f8:	81 ee       	ldi	r24, 0xE1	; 225
 1fa:	94 e0       	ldi	r25, 0x04	; 4
 1fc:	21 50       	subi	r18, 0x01	; 1
 1fe:	80 40       	sbci	r24, 0x00	; 0
 200:	90 40       	sbci	r25, 0x00	; 0
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x18>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x22>
 206:	00 00       	nop
 208:	f0 cf       	rjmp	.-32     	; 0x1ea <main+0x6>

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
