
practica1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000002f8  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000029c  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000155  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002cb  00000000  00000000  00000841  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00000b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ec  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001c2  00000000  00000000  00000dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00000f7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ef       	ldi	r30, 0xF8	; 248
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 09 01 	call	0x212	; 0x212 <main>
  8a:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <util/delay.h>
int decodificador[10] = {0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000011, 0b1111000, 0b0000000, 0b0011000};
int valor = 0;
int cont = 1;
ISR(INT0_vect) //Incremento	
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	cont = 1;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	90 93 61 00 	sts	0x0061, r25
  a8:	80 93 60 00 	sts	0x0060, r24
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_2>:
ISR(INT1_vect) //Decremento
{
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	cont = -1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	9f ef       	ldi	r25, 0xFF	; 255
  cc:	90 93 61 00 	sts	0x0061, r25
  d0:	80 93 60 00 	sts	0x0060, r24
	
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_3>:
ISR(INT2_vect) //Reset
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	valor = -1;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	9f ef       	ldi	r25, 0xFF	; 255
  f4:	90 93 77 00 	sts	0x0077, r25
  f8:	80 93 76 00 	sts	0x0076, r24
	cont = 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 61 00 	sts	0x0061, r25
 104:	80 93 60 00 	sts	0x0060, r24
}
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <display>:
int display (int numero) 
{
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ff 92       	push	r15
 11c:	0f 93       	push	r16
 11e:	1f 93       	push	r17
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	8c 01       	movw	r16, r24
	
	for (int i = 0; i<=1;i++)
	{
		PORTD = 0b00010000;
		PORTC = decodificador[numero%10]; //Se presentan las unidades
 126:	2a e0       	ldi	r18, 0x0A	; 10
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 130:	fc 01       	movw	r30, r24
		_delay_ms(60);
		PORTD = 0b00100000;
		PORTC = decodificador[(numero/10)%10]; //Se presentan las decenas
 132:	cb 01       	movw	r24, r22
 134:	b9 01       	movw	r22, r18
 136:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 13a:	ec 01       	movw	r28, r24
		_delay_ms(60);
		PORTD = 0b01000000;
		PORTC = decodificador[(numero/100)%10]; //Se presentan las centenas
 13c:	c8 01       	movw	r24, r16
 13e:	64 e6       	ldi	r22, 0x64	; 100
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 146:	cb 01       	movw	r24, r22
 148:	b9 01       	movw	r22, r18
 14a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 14e:	9c 01       	movw	r18, r24
		_delay_ms(60);
		PORTD = 0b10000000;
		PORTC = decodificador[numero/1000]; //Se presentan los miles
 150:	c8 01       	movw	r24, r16
 152:	68 ee       	ldi	r22, 0xE8	; 232
 154:	73 e0       	ldi	r23, 0x03	; 3
 156:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__divmodhi4>
 15a:	42 e0       	ldi	r20, 0x02	; 2
 15c:	50 e0       	ldi	r21, 0x00	; 0
int display (int numero) 
{
	
	for (int i = 0; i<=1;i++)
	{
		PORTD = 0b00010000;
 15e:	10 e1       	ldi	r17, 0x10	; 16
		PORTC = decodificador[numero%10]; //Se presentan las unidades
 160:	cf 01       	movw	r24, r30
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	8e 59       	subi	r24, 0x9E	; 158
 168:	9f 4f       	sbci	r25, 0xFF	; 255
		_delay_ms(60);
		PORTD = 0b00100000;
 16a:	68 94       	set
 16c:	ff 24       	eor	r15, r15
 16e:	f5 f8       	bld	r15, 5
		PORTC = decodificador[(numero/10)%10]; //Se presentan las decenas
 170:	cc 0f       	add	r28, r28
 172:	dd 1f       	adc	r29, r29
 174:	ce 59       	subi	r28, 0x9E	; 158
 176:	df 4f       	sbci	r29, 0xFF	; 255
		_delay_ms(60);
		PORTD = 0b01000000;
 178:	00 e4       	ldi	r16, 0x40	; 64
		PORTC = decodificador[(numero/100)%10]; //Se presentan las centenas
 17a:	d9 01       	movw	r26, r18
 17c:	aa 0f       	add	r26, r26
 17e:	bb 1f       	adc	r27, r27
 180:	ae 59       	subi	r26, 0x9E	; 158
 182:	bf 4f       	sbci	r27, 0xFF	; 255
		_delay_ms(60);
		PORTD = 0b10000000;
 184:	30 e8       	ldi	r19, 0x80	; 128
		PORTC = decodificador[numero/1000]; //Se presentan los miles
 186:	fb 01       	movw	r30, r22
 188:	ee 0f       	add	r30, r30
 18a:	ff 1f       	adc	r31, r31
 18c:	bf 01       	movw	r22, r30
 18e:	6e 59       	subi	r22, 0x9E	; 158
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	6b 01       	movw	r12, r22
int display (int numero) 
{
	
	for (int i = 0; i<=1;i++)
	{
		PORTD = 0b00010000;
 194:	12 bb       	out	0x12, r17	; 18
		PORTC = decodificador[numero%10]; //Se presentan las unidades
 196:	fc 01       	movw	r30, r24
 198:	20 81       	ld	r18, Z
 19a:	25 bb       	out	0x15, r18	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	ff ef       	ldi	r31, 0xFF	; 255
 19e:	26 e7       	ldi	r18, 0x76	; 118
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	f1 50       	subi	r31, 0x01	; 1
 1a4:	20 40       	sbci	r18, 0x00	; 0
 1a6:	60 40       	sbci	r22, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <display+0x8c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <display+0x96>
 1ac:	00 00       	nop
		_delay_ms(60);
		PORTD = 0b00100000;
 1ae:	f2 ba       	out	0x12, r15	; 18
		PORTC = decodificador[(numero/10)%10]; //Se presentan las decenas
 1b0:	28 81       	ld	r18, Y
 1b2:	25 bb       	out	0x15, r18	; 21
 1b4:	7f ef       	ldi	r23, 0xFF	; 255
 1b6:	e6 e7       	ldi	r30, 0x76	; 118
 1b8:	f1 e0       	ldi	r31, 0x01	; 1
 1ba:	71 50       	subi	r23, 0x01	; 1
 1bc:	e0 40       	sbci	r30, 0x00	; 0
 1be:	f0 40       	sbci	r31, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <display+0xa4>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <display+0xae>
 1c4:	00 00       	nop
		_delay_ms(60);
		PORTD = 0b01000000;
 1c6:	02 bb       	out	0x12, r16	; 18
		PORTC = decodificador[(numero/100)%10]; //Se presentan las centenas
 1c8:	2c 91       	ld	r18, X
 1ca:	25 bb       	out	0x15, r18	; 21
 1cc:	2f ef       	ldi	r18, 0xFF	; 255
 1ce:	66 e7       	ldi	r22, 0x76	; 118
 1d0:	71 e0       	ldi	r23, 0x01	; 1
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	60 40       	sbci	r22, 0x00	; 0
 1d6:	70 40       	sbci	r23, 0x00	; 0
 1d8:	e1 f7       	brne	.-8      	; 0x1d2 <display+0xbc>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <display+0xc6>
 1dc:	00 00       	nop
		_delay_ms(60);
		PORTD = 0b10000000;
 1de:	32 bb       	out	0x12, r19	; 18
		PORTC = decodificador[numero/1000]; //Se presentan los miles
 1e0:	f6 01       	movw	r30, r12
 1e2:	20 81       	ld	r18, Z
 1e4:	25 bb       	out	0x15, r18	; 21
 1e6:	ff ef       	ldi	r31, 0xFF	; 255
 1e8:	26 e7       	ldi	r18, 0x76	; 118
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	f1 50       	subi	r31, 0x01	; 1
 1ee:	20 40       	sbci	r18, 0x00	; 0
 1f0:	60 40       	sbci	r22, 0x00	; 0
 1f2:	e1 f7       	brne	.-8      	; 0x1ec <display+0xd6>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <display+0xe0>
 1f6:	00 00       	nop
 1f8:	41 50       	subi	r20, 0x01	; 1
 1fa:	51 09       	sbc	r21, r1
	cont = 1;
}
int display (int numero) 
{
	
	for (int i = 0; i<=1;i++)
 1fc:	59 f6       	brne	.-106    	; 0x194 <display+0x7e>
		PORTD = 0b10000000;
		PORTC = decodificador[numero/1000]; //Se presentan los miles
		_delay_ms(60);
	}
	return 0;
}
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	1f 91       	pop	r17
 208:	0f 91       	pop	r16
 20a:	ff 90       	pop	r15
 20c:	df 90       	pop	r13
 20e:	cf 90       	pop	r12
 210:	08 95       	ret

00000212 <main>:
int main(void)
{
	sei();
 212:	78 94       	sei
	GICR = 0b11100000; //Habilitar interrupciones 
 214:	80 ee       	ldi	r24, 0xE0	; 224
 216:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0b00001111; //Detecta interrupciones por flanco de subida
 218:	8f e0       	ldi	r24, 0x0F	; 15
 21a:	85 bf       	out	0x35, r24	; 53
	MCUCSR = 0b01000000;//Registro para detectar la interrupcion INT2
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	84 bf       	out	0x34, r24	; 52
	DDRC = 0b11111111;
 220:	8f ef       	ldi	r24, 0xFF	; 255
 222:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11110000;
 224:	80 ef       	ldi	r24, 0xF0	; 240
 226:	81 bb       	out	0x11, r24	; 17
	cont = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	90 93 61 00 	sts	0x0061, r25
 230:	80 93 60 00 	sts	0x0060, r24
		{
			valor = -1;
		}
		if ((valor == 0) && (cont == -1))
		{
			valor =9999;
 234:	cf e0       	ldi	r28, 0x0F	; 15
 236:	d7 e2       	ldi	r29, 0x27	; 39
	while(1)
	{
		display(valor);			
		if ((valor==9999) && (cont == 1))	
		{
			valor = -1;
 238:	0f ef       	ldi	r16, 0xFF	; 255
 23a:	1f ef       	ldi	r17, 0xFF	; 255
	DDRC = 0b11111111;
	DDRD = 0b11110000;
	cont = 1;
	while(1)
	{
		display(valor);			
 23c:	80 91 76 00 	lds	r24, 0x0076
 240:	90 91 77 00 	lds	r25, 0x0077
 244:	0e 94 8b 00 	call	0x116	; 0x116 <display>
		if ((valor==9999) && (cont == 1))	
 248:	80 91 76 00 	lds	r24, 0x0076
 24c:	90 91 77 00 	lds	r25, 0x0077
 250:	8f 30       	cpi	r24, 0x0F	; 15
 252:	27 e2       	ldi	r18, 0x27	; 39
 254:	92 07       	cpc	r25, r18
 256:	59 f4       	brne	.+22     	; 0x26e <main+0x5c>
 258:	80 91 60 00 	lds	r24, 0x0060
 25c:	90 91 61 00 	lds	r25, 0x0061
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	89 f4       	brne	.+34     	; 0x286 <main+0x74>
		{
			valor = -1;
 264:	10 93 77 00 	sts	0x0077, r17
 268:	00 93 76 00 	sts	0x0076, r16
 26c:	0c c0       	rjmp	.+24     	; 0x286 <main+0x74>
		}
		if ((valor == 0) && (cont == -1))
 26e:	89 2b       	or	r24, r25
 270:	51 f4       	brne	.+20     	; 0x286 <main+0x74>
 272:	80 91 60 00 	lds	r24, 0x0060
 276:	90 91 61 00 	lds	r25, 0x0061
 27a:	01 96       	adiw	r24, 0x01	; 1
 27c:	21 f4       	brne	.+8      	; 0x286 <main+0x74>
		{
			valor =9999;
 27e:	d0 93 77 00 	sts	0x0077, r29
 282:	c0 93 76 00 	sts	0x0076, r28
		}
		valor = valor+cont;
 286:	20 91 76 00 	lds	r18, 0x0076
 28a:	30 91 77 00 	lds	r19, 0x0077
 28e:	80 91 60 00 	lds	r24, 0x0060
 292:	90 91 61 00 	lds	r25, 0x0061
 296:	82 0f       	add	r24, r18
 298:	93 1f       	adc	r25, r19
 29a:	90 93 77 00 	sts	0x0077, r25
 29e:	80 93 76 00 	sts	0x0076, r24
	}
 2a2:	cc cf       	rjmp	.-104    	; 0x23c <main+0x2a>

000002a4 <__divmodhi4>:
 2a4:	97 fb       	bst	r25, 7
 2a6:	07 2e       	mov	r0, r23
 2a8:	16 f4       	brtc	.+4      	; 0x2ae <__divmodhi4+0xa>
 2aa:	00 94       	com	r0
 2ac:	07 d0       	rcall	.+14     	; 0x2bc <__divmodhi4_neg1>
 2ae:	77 fd       	sbrc	r23, 7
 2b0:	09 d0       	rcall	.+18     	; 0x2c4 <__divmodhi4_neg2>
 2b2:	0e 94 66 01 	call	0x2cc	; 0x2cc <__udivmodhi4>
 2b6:	07 fc       	sbrc	r0, 7
 2b8:	05 d0       	rcall	.+10     	; 0x2c4 <__divmodhi4_neg2>
 2ba:	3e f4       	brtc	.+14     	; 0x2ca <__divmodhi4_exit>

000002bc <__divmodhi4_neg1>:
 2bc:	90 95       	com	r25
 2be:	81 95       	neg	r24
 2c0:	9f 4f       	sbci	r25, 0xFF	; 255
 2c2:	08 95       	ret

000002c4 <__divmodhi4_neg2>:
 2c4:	70 95       	com	r23
 2c6:	61 95       	neg	r22
 2c8:	7f 4f       	sbci	r23, 0xFF	; 255

000002ca <__divmodhi4_exit>:
 2ca:	08 95       	ret

000002cc <__udivmodhi4>:
 2cc:	aa 1b       	sub	r26, r26
 2ce:	bb 1b       	sub	r27, r27
 2d0:	51 e1       	ldi	r21, 0x11	; 17
 2d2:	07 c0       	rjmp	.+14     	; 0x2e2 <__udivmodhi4_ep>

000002d4 <__udivmodhi4_loop>:
 2d4:	aa 1f       	adc	r26, r26
 2d6:	bb 1f       	adc	r27, r27
 2d8:	a6 17       	cp	r26, r22
 2da:	b7 07       	cpc	r27, r23
 2dc:	10 f0       	brcs	.+4      	; 0x2e2 <__udivmodhi4_ep>
 2de:	a6 1b       	sub	r26, r22
 2e0:	b7 0b       	sbc	r27, r23

000002e2 <__udivmodhi4_ep>:
 2e2:	88 1f       	adc	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	5a 95       	dec	r21
 2e8:	a9 f7       	brne	.-22     	; 0x2d4 <__udivmodhi4_loop>
 2ea:	80 95       	com	r24
 2ec:	90 95       	com	r25
 2ee:	bc 01       	movw	r22, r24
 2f0:	cd 01       	movw	r24, r26
 2f2:	08 95       	ret

000002f4 <_exit>:
 2f4:	f8 94       	cli

000002f6 <__stop_program>:
 2f6:	ff cf       	rjmp	.-2      	; 0x2f6 <__stop_program>
