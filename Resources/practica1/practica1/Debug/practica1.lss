
practica1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000348  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000348  000003dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  000003f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000420  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d8  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000148  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001d1  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00000a90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001e0  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034f  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 5d 00 	jmp	0xba	; 0xba <__vector_2>
   c:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 38 01 	call	0x270	; 0x270 <main>
  8a:	0c 94 a2 01 	jmp	0x344	; 0x344 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
int aux=0;
int cont=0;
int unidad, decena, centena, mil;
int numeros[10] = {0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000011, 0b1111000, 0b0000000, 0b0011000};

ISR(INT0_vect){
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	aux=2;
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	90 93 77 00 	sts	0x0077, r25
  a8:	80 93 76 00 	sts	0x0076, r24
}
  ac:	9f 91       	pop	r25
  ae:	8f 91       	pop	r24
  b0:	0f 90       	pop	r0
  b2:	0f be       	out	0x3f, r0	; 63
  b4:	0f 90       	pop	r0
  b6:	1f 90       	pop	r1
  b8:	18 95       	reti

000000ba <__vector_2>:

ISR(INT1_vect){
  ba:	1f 92       	push	r1
  bc:	0f 92       	push	r0
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	0f 92       	push	r0
  c2:	11 24       	eor	r1, r1
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
	aux=1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 77 00 	sts	0x0077, r25
  d0:	80 93 76 00 	sts	0x0076, r24
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <__vector_3>:

ISR(INT2_vect){
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	cont=0;
  f0:	10 92 75 00 	sts	0x0075, r1
  f4:	10 92 74 00 	sts	0x0074, r1
	aux=1;
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	90 93 77 00 	sts	0x0077, r25
 100:	80 93 76 00 	sts	0x0076, r24
}
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <mostrar>:


int mostrar(int numero)
{
 112:	9c 01       	movw	r18, r24
	mil=numero/1000;
 114:	68 ee       	ldi	r22, 0xE8	; 232
 116:	73 e0       	ldi	r23, 0x03	; 3
 118:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 11c:	70 93 7f 00 	sts	0x007F, r23
 120:	60 93 7e 00 	sts	0x007E, r22
	centena=numero/100;
 124:	c9 01       	movw	r24, r18
 126:	64 e6       	ldi	r22, 0x64	; 100
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 12e:	f6 2f       	mov	r31, r22
 130:	e7 2f       	mov	r30, r23
 132:	60 93 78 00 	sts	0x0078, r22
 136:	70 93 79 00 	sts	0x0079, r23
	decena=numero/10;
 13a:	c9 01       	movw	r24, r18
 13c:	6a e0       	ldi	r22, 0x0A	; 10
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 144:	b6 2f       	mov	r27, r22
 146:	60 93 7a 00 	sts	0x007A, r22
 14a:	70 93 7b 00 	sts	0x007B, r23
	unidad=numero%10;
 14e:	90 93 7d 00 	sts	0x007D, r25
 152:	80 93 7c 00 	sts	0x007C, r24
	if(numero>=100 && numero<1000)
 156:	a9 01       	movw	r20, r18
 158:	44 56       	subi	r20, 0x64	; 100
 15a:	51 09       	sbc	r21, r1
 15c:	44 38       	cpi	r20, 0x84	; 132
 15e:	53 40       	sbci	r21, 0x03	; 3
 160:	50 f4       	brcc	.+20     	; 0x176 <mostrar+0x64>
	{
		decena=decena%10;
 162:	8b 2f       	mov	r24, r27
 164:	97 2f       	mov	r25, r23
 166:	6a e0       	ldi	r22, 0x0A	; 10
 168:	70 e0       	ldi	r23, 0x00	; 0
 16a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 16e:	90 93 7b 00 	sts	0x007B, r25
 172:	80 93 7a 00 	sts	0x007A, r24
	}
	if (numero>=1000)
 176:	28 3e       	cpi	r18, 0xE8	; 232
 178:	33 40       	sbci	r19, 0x03	; 3
 17a:	0c f4       	brge	.+2      	; 0x17e <mostrar+0x6c>
 17c:	6f c0       	rjmp	.+222    	; 0x25c <mostrar+0x14a>
	{
		decena=decena%100;
 17e:	80 91 7a 00 	lds	r24, 0x007A
 182:	90 91 7b 00 	lds	r25, 0x007B
 186:	64 e6       	ldi	r22, 0x64	; 100
 188:	70 e0       	ldi	r23, 0x00	; 0
 18a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
		decena=decena%10;
 18e:	2a e0       	ldi	r18, 0x0A	; 10
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	b9 01       	movw	r22, r18
 194:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 198:	90 93 7b 00 	sts	0x007B, r25
 19c:	80 93 7a 00 	sts	0x007A, r24
		centena=centena%10;
 1a0:	8f 2f       	mov	r24, r31
 1a2:	9e 2f       	mov	r25, r30
 1a4:	b9 01       	movw	r22, r18
 1a6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__divmodhi4>
 1aa:	90 93 79 00 	sts	0x0079, r25
 1ae:	80 93 78 00 	sts	0x0078, r24
 1b2:	54 c0       	rjmp	.+168    	; 0x25c <mostrar+0x14a>
	}
	for (int i=0;i<5;i++)
	{
		PORTA=0x80;
 1b4:	5b bb       	out	0x1b, r21	; 27
		PORTC=numeros[unidad];
 1b6:	e0 91 7c 00 	lds	r30, 0x007C
 1ba:	f0 91 7d 00 	lds	r31, 0x007D
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	60 81       	ld	r22, Z
 1c8:	65 bb       	out	0x15, r22	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	ef ef       	ldi	r30, 0xFF	; 255
 1cc:	63 ef       	ldi	r22, 0xF3	; 243
 1ce:	71 e0       	ldi	r23, 0x01	; 1
 1d0:	e1 50       	subi	r30, 0x01	; 1
 1d2:	60 40       	sbci	r22, 0x00	; 0
 1d4:	70 40       	sbci	r23, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <mostrar+0xbe>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <mostrar+0xc8>
 1da:	00 00       	nop
		_delay_ms(80);
		
		PORTA=0x40;
 1dc:	4b bb       	out	0x1b, r20	; 27
		PORTC=numeros[decena];
 1de:	e0 91 7a 00 	lds	r30, 0x007A
 1e2:	f0 91 7b 00 	lds	r31, 0x007B
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	e0 5a       	subi	r30, 0xA0	; 160
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	60 81       	ld	r22, Z
 1f0:	65 bb       	out	0x15, r22	; 21
 1f2:	ef ef       	ldi	r30, 0xFF	; 255
 1f4:	63 ef       	ldi	r22, 0xF3	; 243
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	e1 50       	subi	r30, 0x01	; 1
 1fa:	60 40       	sbci	r22, 0x00	; 0
 1fc:	70 40       	sbci	r23, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <mostrar+0xe6>
 200:	00 c0       	rjmp	.+0      	; 0x202 <mostrar+0xf0>
 202:	00 00       	nop
		_delay_ms(80);
		
		PORTA=0x20;
 204:	3b bb       	out	0x1b, r19	; 27
		PORTC=numeros[centena];
 206:	e0 91 78 00 	lds	r30, 0x0078
 20a:	f0 91 79 00 	lds	r31, 0x0079
 20e:	ee 0f       	add	r30, r30
 210:	ff 1f       	adc	r31, r31
 212:	e0 5a       	subi	r30, 0xA0	; 160
 214:	ff 4f       	sbci	r31, 0xFF	; 255
 216:	60 81       	ld	r22, Z
 218:	65 bb       	out	0x15, r22	; 21
 21a:	ef ef       	ldi	r30, 0xFF	; 255
 21c:	63 ef       	ldi	r22, 0xF3	; 243
 21e:	71 e0       	ldi	r23, 0x01	; 1
 220:	e1 50       	subi	r30, 0x01	; 1
 222:	60 40       	sbci	r22, 0x00	; 0
 224:	70 40       	sbci	r23, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <mostrar+0x10e>
 228:	00 c0       	rjmp	.+0      	; 0x22a <mostrar+0x118>
 22a:	00 00       	nop
		_delay_ms(80);
		
		PORTA=0x10;
 22c:	2b bb       	out	0x1b, r18	; 27
		PORTC=numeros[mil];
 22e:	e0 91 7e 00 	lds	r30, 0x007E
 232:	f0 91 7f 00 	lds	r31, 0x007F
 236:	ee 0f       	add	r30, r30
 238:	ff 1f       	adc	r31, r31
 23a:	e0 5a       	subi	r30, 0xA0	; 160
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	60 81       	ld	r22, Z
 240:	65 bb       	out	0x15, r22	; 21
 242:	ef ef       	ldi	r30, 0xFF	; 255
 244:	63 ef       	ldi	r22, 0xF3	; 243
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	e1 50       	subi	r30, 0x01	; 1
 24a:	60 40       	sbci	r22, 0x00	; 0
 24c:	70 40       	sbci	r23, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <mostrar+0x136>
 250:	00 c0       	rjmp	.+0      	; 0x252 <mostrar+0x140>
 252:	00 00       	nop
 254:	01 97       	sbiw	r24, 0x01	; 1
	{
		decena=decena%100;
		decena=decena%10;
		centena=centena%10;
	}
	for (int i=0;i<5;i++)
 256:	09 f0       	breq	.+2      	; 0x25a <mostrar+0x148>
 258:	ad cf       	rjmp	.-166    	; 0x1b4 <mostrar+0xa2>
 25a:	07 c0       	rjmp	.+14     	; 0x26a <mostrar+0x158>
	aux=1;
}


int mostrar(int numero)
{
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	90 e0       	ldi	r25, 0x00	; 0
		decena=decena%10;
		centena=centena%10;
	}
	for (int i=0;i<5;i++)
	{
		PORTA=0x80;
 260:	50 e8       	ldi	r21, 0x80	; 128
		PORTC=numeros[unidad];
		_delay_ms(80);
		
		PORTA=0x40;
 262:	40 e4       	ldi	r20, 0x40	; 64
		PORTC=numeros[decena];
		_delay_ms(80);
		
		PORTA=0x20;
 264:	30 e2       	ldi	r19, 0x20	; 32
		PORTC=numeros[centena];
		_delay_ms(80);
		
		PORTA=0x10;
 266:	20 e1       	ldi	r18, 0x10	; 16
 268:	a5 cf       	rjmp	.-182    	; 0x1b4 <mostrar+0xa2>
		_delay_ms(80);
		
	}
	
	return 0;
}
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	08 95       	ret

00000270 <main>:

int main(void)
{
	DDRC=0xff;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	84 bb       	out	0x14, r24	; 20
	DDRA=0xf0;
 274:	80 ef       	ldi	r24, 0xF0	; 240
 276:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x0f;
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	8b bb       	out	0x1b, r24	; 27
	
	//GICR=0b01000000;//habilitar interrupcion externa 0
	GICR=0b11100000;//habilitar interrupcion externa 0 1 2
 27c:	80 ee       	ldi	r24, 0xE0	; 224
 27e:	8b bf       	out	0x3b, r24	; 59
	MCUCR=0b01001111;//configurar deteccion de interrupcion
 280:	8f e4       	ldi	r24, 0x4F	; 79
 282:	85 bf       	out	0x35, r24	; 53
	sei();//activador global de interrupciones
 284:	78 94       	sei
	aux=1;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	90 93 77 00 	sts	0x0077, r25
 28e:	80 93 76 00 	sts	0x0076, r24
	while(1){
		mostrar(cont);
		if (cont ==0){
			aux=1;
 292:	c1 e0       	ldi	r28, 0x01	; 1
 294:	d0 e0       	ldi	r29, 0x00	; 0
	GICR=0b11100000;//habilitar interrupcion externa 0 1 2
	MCUCR=0b01001111;//configurar deteccion de interrupcion
	sei();//activador global de interrupciones
	aux=1;
	while(1){
		mostrar(cont);
 296:	80 91 74 00 	lds	r24, 0x0074
 29a:	90 91 75 00 	lds	r25, 0x0075
 29e:	0e 94 89 00 	call	0x112	; 0x112 <mostrar>
		if (cont ==0){
 2a2:	80 91 74 00 	lds	r24, 0x0074
 2a6:	90 91 75 00 	lds	r25, 0x0075
 2aa:	00 97       	sbiw	r24, 0x00	; 0
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <main+0x48>
			aux=1;
 2ae:	d0 93 77 00 	sts	0x0077, r29
 2b2:	c0 93 76 00 	sts	0x0076, r28
 2b6:	07 c0       	rjmp	.+14     	; 0x2c6 <main+0x56>
		}
		if(aux==1){
 2b8:	20 91 76 00 	lds	r18, 0x0076
 2bc:	30 91 77 00 	lds	r19, 0x0077
 2c0:	21 30       	cpi	r18, 0x01	; 1
 2c2:	31 05       	cpc	r19, r1
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <main+0x62>
			cont++;
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 75 00 	sts	0x0075, r25
 2cc:	80 93 74 00 	sts	0x0074, r24
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <main+0x6c>
			}else{
			cont--;
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	90 93 75 00 	sts	0x0075, r25
 2d8:	80 93 74 00 	sts	0x0074, r24
		}
		if (cont > 9999){
 2dc:	80 91 74 00 	lds	r24, 0x0074
 2e0:	90 91 75 00 	lds	r25, 0x0075
 2e4:	80 31       	cpi	r24, 0x10	; 16
 2e6:	97 42       	sbci	r25, 0x27	; 39
 2e8:	b4 f2       	brlt	.-84     	; 0x296 <main+0x26>
			cont=0;
 2ea:	10 92 75 00 	sts	0x0075, r1
 2ee:	10 92 74 00 	sts	0x0074, r1
 2f2:	d1 cf       	rjmp	.-94     	; 0x296 <main+0x26>

000002f4 <__divmodhi4>:
 2f4:	97 fb       	bst	r25, 7
 2f6:	07 2e       	mov	r0, r23
 2f8:	16 f4       	brtc	.+4      	; 0x2fe <__divmodhi4+0xa>
 2fa:	00 94       	com	r0
 2fc:	07 d0       	rcall	.+14     	; 0x30c <__divmodhi4_neg1>
 2fe:	77 fd       	sbrc	r23, 7
 300:	09 d0       	rcall	.+18     	; 0x314 <__divmodhi4_neg2>
 302:	0e 94 8e 01 	call	0x31c	; 0x31c <__udivmodhi4>
 306:	07 fc       	sbrc	r0, 7
 308:	05 d0       	rcall	.+10     	; 0x314 <__divmodhi4_neg2>
 30a:	3e f4       	brtc	.+14     	; 0x31a <__divmodhi4_exit>

0000030c <__divmodhi4_neg1>:
 30c:	90 95       	com	r25
 30e:	81 95       	neg	r24
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <__divmodhi4_neg2>:
 314:	70 95       	com	r23
 316:	61 95       	neg	r22
 318:	7f 4f       	sbci	r23, 0xFF	; 255

0000031a <__divmodhi4_exit>:
 31a:	08 95       	ret

0000031c <__udivmodhi4>:
 31c:	aa 1b       	sub	r26, r26
 31e:	bb 1b       	sub	r27, r27
 320:	51 e1       	ldi	r21, 0x11	; 17
 322:	07 c0       	rjmp	.+14     	; 0x332 <__udivmodhi4_ep>

00000324 <__udivmodhi4_loop>:
 324:	aa 1f       	adc	r26, r26
 326:	bb 1f       	adc	r27, r27
 328:	a6 17       	cp	r26, r22
 32a:	b7 07       	cpc	r27, r23
 32c:	10 f0       	brcs	.+4      	; 0x332 <__udivmodhi4_ep>
 32e:	a6 1b       	sub	r26, r22
 330:	b7 0b       	sbc	r27, r23

00000332 <__udivmodhi4_ep>:
 332:	88 1f       	adc	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	5a 95       	dec	r21
 338:	a9 f7       	brne	.-22     	; 0x324 <__udivmodhi4_loop>
 33a:	80 95       	com	r24
 33c:	90 95       	com	r25
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
