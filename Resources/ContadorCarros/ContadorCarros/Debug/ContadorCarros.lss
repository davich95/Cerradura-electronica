
ContadorCarros.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000002f0  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800076  00800076  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000024b  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000155  00000000  00000000  0000068b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a3  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00000a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001d5  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001a0  00000000  00000000  00000d0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e7       	ldi	r26, 0x76	; 118
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a8 37       	cpi	r26, 0x78	; 120
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 30 01 	call	0x260	; 0x260 <main>
  8a:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
#include <util/delay.h>
#include <avr/interrupt.h>
int decodificador[10] = {0b1000000, 0b1111001, 0b0100100, 0b0110000, 0b0011001, 0b0010010, 0b0000011, 0b1111000, 0b0000000, 0b0011000};
int valor = 0; int cont = 1;
ISR(INT0_vect) //Incrementa
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
	if ((valor == 200) && (cont == 1))
  a4:	20 91 76 00 	lds	r18, 0x0076
  a8:	30 91 77 00 	lds	r19, 0x0077
  ac:	28 3c       	cpi	r18, 0xC8	; 200
  ae:	31 05       	cpc	r19, r1
  b0:	71 f4       	brne	.+28     	; 0xce <__vector_1+0x3c>
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	90 91 61 00 	lds	r25, 0x0061
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	b9 f4       	brne	.+46     	; 0xec <__vector_1+0x5a>
	{
		valor = 200; cont = 0;
  be:	10 92 61 00 	sts	0x0061, r1
  c2:	10 92 60 00 	sts	0x0060, r1
	}
	if ((valor == 0) && cont == 0)
  c6:	21 15       	cp	r18, r1
  c8:	31 05       	cpc	r19, r1
  ca:	51 f0       	breq	.+20     	; 0xe0 <__vector_1+0x4e>
  cc:	0f c0       	rjmp	.+30     	; 0xec <__vector_1+0x5a>
  ce:	21 15       	cp	r18, r1
  d0:	31 05       	cpc	r19, r1
  d2:	61 f4       	brne	.+24     	; 0xec <__vector_1+0x5a>
  d4:	80 91 60 00 	lds	r24, 0x0060
  d8:	90 91 61 00 	lds	r25, 0x0061
  dc:	89 2b       	or	r24, r25
  de:	31 f4       	brne	.+12     	; 0xec <__vector_1+0x5a>
	{
		 cont = 1;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	90 93 61 00 	sts	0x0061, r25
  e8:	80 93 60 00 	sts	0x0060, r24
	}
	valor=valor + cont;
  ec:	80 91 60 00 	lds	r24, 0x0060
  f0:	90 91 61 00 	lds	r25, 0x0061
  f4:	82 0f       	add	r24, r18
  f6:	93 1f       	adc	r25, r19
  f8:	90 93 77 00 	sts	0x0077, r25
  fc:	80 93 76 00 	sts	0x0076, r24
}
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <__vector_2>:
ISR(INT1_vect) //Decrementa
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	2f 93       	push	r18
 11e:	3f 93       	push	r19
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
	if ((valor == 0) && cont == 1)
 124:	80 91 76 00 	lds	r24, 0x0076
 128:	90 91 77 00 	lds	r25, 0x0077
 12c:	00 97       	sbiw	r24, 0x00	; 0
 12e:	91 f4       	brne	.+36     	; 0x154 <__vector_2+0x42>
 130:	80 91 60 00 	lds	r24, 0x0060
 134:	90 91 61 00 	lds	r25, 0x0061
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	d9 f4       	brne	.+54     	; 0x172 <__vector_2+0x60>
	{
		valor = 0; cont = 0;
 13c:	10 92 61 00 	sts	0x0061, r1
 140:	10 92 60 00 	sts	0x0060, r1
	}
	if ((valor == 200) &&  (cont == 0))
 144:	80 91 76 00 	lds	r24, 0x0076
 148:	90 91 77 00 	lds	r25, 0x0077
 14c:	88 3c       	cpi	r24, 0xC8	; 200
 14e:	91 05       	cpc	r25, r1
 150:	51 f0       	breq	.+20     	; 0x166 <__vector_2+0x54>
 152:	0f c0       	rjmp	.+30     	; 0x172 <__vector_2+0x60>
 154:	88 3c       	cpi	r24, 0xC8	; 200
 156:	91 05       	cpc	r25, r1
 158:	61 f4       	brne	.+24     	; 0x172 <__vector_2+0x60>
 15a:	80 91 60 00 	lds	r24, 0x0060
 15e:	90 91 61 00 	lds	r25, 0x0061
 162:	89 2b       	or	r24, r25
 164:	31 f4       	brne	.+12     	; 0x172 <__vector_2+0x60>
	{
		valor = 200; cont = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 61 00 	sts	0x0061, r25
 16e:	80 93 60 00 	sts	0x0060, r24
	}
	valor=valor - cont;
 172:	80 91 76 00 	lds	r24, 0x0076
 176:	90 91 77 00 	lds	r25, 0x0077
 17a:	20 91 60 00 	lds	r18, 0x0060
 17e:	30 91 61 00 	lds	r19, 0x0061
 182:	82 1b       	sub	r24, r18
 184:	93 0b       	sbc	r25, r19
 186:	90 93 77 00 	sts	0x0077, r25
 18a:	80 93 76 00 	sts	0x0076, r24
}
 18e:	9f 91       	pop	r25
 190:	8f 91       	pop	r24
 192:	3f 91       	pop	r19
 194:	2f 91       	pop	r18
 196:	0f 90       	pop	r0
 198:	0f be       	out	0x3f, r0	; 63
 19a:	0f 90       	pop	r0
 19c:	1f 90       	pop	r1
 19e:	18 95       	reti

000001a0 <display>:
int display (int numero)
{
 1a0:	ef 92       	push	r14
 1a2:	ff 92       	push	r15
 1a4:	0f 93       	push	r16
 1a6:	1f 93       	push	r17
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	fc 01       	movw	r30, r24
	for (int i = 0; i<=2; i++)
	{
		PORTA = 0b00000001;
		PORTC = decodificador[numero%10]; //Unidades
 1ae:	2a e0       	ldi	r18, 0x0A	; 10
 1b0:	30 e0       	ldi	r19, 0x00	; 0
 1b2:	b9 01       	movw	r22, r18
 1b4:	0e 94 4e 01 	call	0x29c	; 0x29c <__divmodhi4>
 1b8:	8c 01       	movw	r16, r24
		_delay_ms(50);
		PORTA = 0b00000010;
		PORTC = decodificador[(numero/10)%10]; //Decenas
 1ba:	cb 01       	movw	r24, r22
 1bc:	b9 01       	movw	r22, r18
 1be:	0e 94 4e 01 	call	0x29c	; 0x29c <__divmodhi4>
 1c2:	7c 01       	movw	r14, r24
		_delay_ms(50);
		PORTA = 0b00000100;
		PORTC = decodificador[(numero/100)%10]; //Centenas
 1c4:	cf 01       	movw	r24, r30
 1c6:	64 e6       	ldi	r22, 0x64	; 100
 1c8:	70 e0       	ldi	r23, 0x00	; 0
 1ca:	0e 94 4e 01 	call	0x29c	; 0x29c <__divmodhi4>
 1ce:	cb 01       	movw	r24, r22
 1d0:	b9 01       	movw	r22, r18
 1d2:	0e 94 4e 01 	call	0x29c	; 0x29c <__divmodhi4>
 1d6:	fc 01       	movw	r30, r24
 1d8:	23 e0       	ldi	r18, 0x03	; 3
 1da:	30 e0       	ldi	r19, 0x00	; 0
}
int display (int numero)
{
	for (int i = 0; i<=2; i++)
	{
		PORTA = 0b00000001;
 1dc:	71 e0       	ldi	r23, 0x01	; 1
		PORTC = decodificador[numero%10]; //Unidades
 1de:	c8 01       	movw	r24, r16
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	ec 01       	movw	r28, r24
 1e6:	ce 59       	subi	r28, 0x9E	; 158
 1e8:	df 4f       	sbci	r29, 0xFF	; 255
		_delay_ms(50);
		PORTA = 0b00000010;
 1ea:	62 e0       	ldi	r22, 0x02	; 2
		PORTC = decodificador[(numero/10)%10]; //Decenas
 1ec:	d7 01       	movw	r26, r14
 1ee:	aa 0f       	add	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	ae 59       	subi	r26, 0x9E	; 158
 1f4:	bf 4f       	sbci	r27, 0xFF	; 255
		_delay_ms(50);
		PORTA = 0b00000100;
 1f6:	54 e0       	ldi	r21, 0x04	; 4
		PORTC = decodificador[(numero/100)%10]; //Centenas
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	ee 59       	subi	r30, 0x9E	; 158
 1fe:	ff 4f       	sbci	r31, 0xFF	; 255
}
int display (int numero)
{
	for (int i = 0; i<=2; i++)
	{
		PORTA = 0b00000001;
 200:	7b bb       	out	0x1b, r23	; 27
		PORTC = decodificador[numero%10]; //Unidades
 202:	48 81       	ld	r20, Y
 204:	45 bb       	out	0x15, r20	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 206:	4f e7       	ldi	r20, 0x7F	; 127
 208:	88 e3       	ldi	r24, 0x38	; 56
 20a:	91 e0       	ldi	r25, 0x01	; 1
 20c:	41 50       	subi	r20, 0x01	; 1
 20e:	80 40       	sbci	r24, 0x00	; 0
 210:	90 40       	sbci	r25, 0x00	; 0
 212:	e1 f7       	brne	.-8      	; 0x20c <display+0x6c>
 214:	00 c0       	rjmp	.+0      	; 0x216 <display+0x76>
 216:	00 00       	nop
		_delay_ms(50);
		PORTA = 0b00000010;
 218:	6b bb       	out	0x1b, r22	; 27
		PORTC = decodificador[(numero/10)%10]; //Decenas
 21a:	4c 91       	ld	r20, X
 21c:	45 bb       	out	0x15, r20	; 21
 21e:	4f e7       	ldi	r20, 0x7F	; 127
 220:	88 e3       	ldi	r24, 0x38	; 56
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	41 50       	subi	r20, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <display+0x84>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <display+0x8e>
 22e:	00 00       	nop
		_delay_ms(50);
		PORTA = 0b00000100;
 230:	5b bb       	out	0x1b, r21	; 27
		PORTC = decodificador[(numero/100)%10]; //Centenas
 232:	40 81       	ld	r20, Z
 234:	45 bb       	out	0x15, r20	; 21
 236:	4f e7       	ldi	r20, 0x7F	; 127
 238:	88 e3       	ldi	r24, 0x38	; 56
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	41 50       	subi	r20, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <display+0x9c>
 244:	00 c0       	rjmp	.+0      	; 0x246 <display+0xa6>
 246:	00 00       	nop
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	31 09       	sbc	r19, r1
	}
	valor=valor - cont;
}
int display (int numero)
{
	for (int i = 0; i<=2; i++)
 24c:	c9 f6       	brne	.-78     	; 0x200 <display+0x60>
		PORTA = 0b00000100;
		PORTC = decodificador[(numero/100)%10]; //Centenas
		_delay_ms(50);
	}
	return 0;
}
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	08 95       	ret

00000260 <main>:
int main(void)
{
	sei(); //habilitador de interrupciones
 260:	78 94       	sei
	DDRC = 0b1111111;
 262:	8f e7       	ldi	r24, 0x7F	; 127
 264:	84 bb       	out	0x14, r24	; 20
	DDRA = 0b00011111;
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b00000011;
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	87 bb       	out	0x17, r24	; 23
	GICR = 0b11000000; //Interrupciones  0 y 1
 26e:	80 ec       	ldi	r24, 0xC0	; 192
 270:	8b bf       	out	0x3b, r24	; 59
	MCUCR = 0b00001111; //flanco de subida
 272:	8f e0       	ldi	r24, 0x0F	; 15
 274:	85 bf       	out	0x35, r24	; 53
		{
			PORTB = 0b00000010;
		} 
		else
		{
			PORTB = 0b00000001;
 276:	d1 e0       	ldi	r29, 0x01	; 1
    while (1) 
    {
		display(valor);
		if (valor < 200)
		{
			PORTB = 0b00000010;
 278:	c2 e0       	ldi	r28, 0x02	; 2
	GICR = 0b11000000; //Interrupciones  0 y 1
	MCUCR = 0b00001111; //flanco de subida
	//int valor = 0; int cont = 1;
    while (1) 
    {
		display(valor);
 27a:	80 91 76 00 	lds	r24, 0x0076
 27e:	90 91 77 00 	lds	r25, 0x0077
 282:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <display>
		if (valor < 200)
 286:	80 91 76 00 	lds	r24, 0x0076
 28a:	90 91 77 00 	lds	r25, 0x0077
 28e:	88 3c       	cpi	r24, 0xC8	; 200
 290:	91 05       	cpc	r25, r1
 292:	14 f4       	brge	.+4      	; 0x298 <main+0x38>
		{
			PORTB = 0b00000010;
 294:	c8 bb       	out	0x18, r28	; 24
 296:	f1 cf       	rjmp	.-30     	; 0x27a <main+0x1a>
		} 
		else
		{
			PORTB = 0b00000001;
 298:	d8 bb       	out	0x18, r29	; 24
 29a:	ef cf       	rjmp	.-34     	; 0x27a <main+0x1a>

0000029c <__divmodhi4>:
 29c:	97 fb       	bst	r25, 7
 29e:	07 2e       	mov	r0, r23
 2a0:	16 f4       	brtc	.+4      	; 0x2a6 <__divmodhi4+0xa>
 2a2:	00 94       	com	r0
 2a4:	07 d0       	rcall	.+14     	; 0x2b4 <__divmodhi4_neg1>
 2a6:	77 fd       	sbrc	r23, 7
 2a8:	09 d0       	rcall	.+18     	; 0x2bc <__divmodhi4_neg2>
 2aa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <__udivmodhi4>
 2ae:	07 fc       	sbrc	r0, 7
 2b0:	05 d0       	rcall	.+10     	; 0x2bc <__divmodhi4_neg2>
 2b2:	3e f4       	brtc	.+14     	; 0x2c2 <__divmodhi4_exit>

000002b4 <__divmodhi4_neg1>:
 2b4:	90 95       	com	r25
 2b6:	81 95       	neg	r24
 2b8:	9f 4f       	sbci	r25, 0xFF	; 255
 2ba:	08 95       	ret

000002bc <__divmodhi4_neg2>:
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255

000002c2 <__divmodhi4_exit>:
 2c2:	08 95       	ret

000002c4 <__udivmodhi4>:
 2c4:	aa 1b       	sub	r26, r26
 2c6:	bb 1b       	sub	r27, r27
 2c8:	51 e1       	ldi	r21, 0x11	; 17
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__udivmodhi4_ep>

000002cc <__udivmodhi4_loop>:
 2cc:	aa 1f       	adc	r26, r26
 2ce:	bb 1f       	adc	r27, r27
 2d0:	a6 17       	cp	r26, r22
 2d2:	b7 07       	cpc	r27, r23
 2d4:	10 f0       	brcs	.+4      	; 0x2da <__udivmodhi4_ep>
 2d6:	a6 1b       	sub	r26, r22
 2d8:	b7 0b       	sbc	r27, r23

000002da <__udivmodhi4_ep>:
 2da:	88 1f       	adc	r24, r24
 2dc:	99 1f       	adc	r25, r25
 2de:	5a 95       	dec	r21
 2e0:	a9 f7       	brne	.-22     	; 0x2cc <__udivmodhi4_loop>
 2e2:	80 95       	com	r24
 2e4:	90 95       	com	r25
 2e6:	bc 01       	movw	r22, r24
 2e8:	cd 01       	movw	r24, r26
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
